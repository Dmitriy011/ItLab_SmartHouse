#version 330 core
out vec4 FragColor;

struct Material					//структура для цвета объекта(также текстуры)
{
    sampler2D diffuse;				//удалили вектор ambient, так как он в большинстве случаев совпадает с диффузным цветом
    vec3 specular;    
    float shininess;
}; 

struct Light 
{
    vec3 position;				//позиция света

    vec3 ambient;				//фоновый цвет материала
    vec3 diffuse;				//диффузный цвет
    vec3 specular;				//блики

    float constant;				//постоянный коэф
    float linear;				//линейныйкоэф
    float quadratic;				//квадратичный коэф
};	

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;				//~float ambientStrength = 0.1;		
    													//~vec3 ambient = ambientStrength * lightColor * texture(material.diffuse, TexCoords).rgb;
  	
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);						//~vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  			//~vec3 diffuse = diff * lightColor * texture(texture_diffuse1, TexCoords).rgb;
    
													//~float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);							//~vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 							//~vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);				//~float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * (spec * material.specular);  					//~vec3 specular = specularStrength * spec * lightColor;  

    float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    ambient  *= attenuation;  
    diffuse   *= attenuation;
    specular *= attenuation;     

    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 